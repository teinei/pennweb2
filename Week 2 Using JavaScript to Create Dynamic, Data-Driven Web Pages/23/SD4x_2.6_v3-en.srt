0
00:00:05,269 --> 00:00:07,976
Until now, we've been talking about JavaScript and

1
00:00:07,976 --> 00:00:12,720
features of the langauge itself, not necessarily how we use JavaScript in HTML.

2
00:00:12,720 --> 00:00:15,990
We'll start to see that in the next lesson but before we get there,

3
00:00:15,990 --> 00:00:20,000
there's just one more thing to talk about which is JavaScript strings.

4
00:00:20,000 --> 00:00:23,480
In any programming langauge, there's going to be some notion of strings.

5
00:00:23,480 --> 00:00:27,170
Strings are usually a collection of characters and in JavaScript,

6
00:00:27,170 --> 00:00:30,260
as in many other programming languages, strings are immutable.

7
00:00:30,260 --> 00:00:31,880
That means we can't change them.

8
00:00:31,880 --> 00:00:35,310
So in this lesson, we'll start talking about how we can use strings and

9
00:00:35,310 --> 00:00:38,300
some of the different functions that the strings offer.

10
00:00:38,300 --> 00:00:42,710
We can always get the number of characters in a string using the length property and

11
00:00:42,710 --> 00:00:48,371
access each character by its (0-based) index using the charAt function or

12
00:00:48,371 --> 00:00:49,930
array notation.

13
00:00:49,930 --> 00:00:53,677
In this example, we have a name or variable called name,

14
00:00:53,677 --> 00:00:55,283
which is set to toucan.

15
00:00:55,283 --> 00:00:57,820
And I can get its length property which will

16
00:00:57,820 --> 00:01:00,700
return 6 because there are 6 letters in the word.

17
00:01:02,160 --> 00:01:06,160
I can also get individual characters out of there

18
00:01:06,160 --> 00:01:08,840
using the index which is (0-based).

19
00:01:08,840 --> 00:01:12,850
Here I'll get the third character, (0-based), and

20
00:01:12,850 --> 00:01:18,440
that will return c, that's character, 0, 1, 2, 3.

21
00:01:18,440 --> 00:01:23,360
Likewise, I can use the array notation, we can think of it as name [3],

22
00:01:23,360 --> 00:01:26,210
this will also return the character c.

23
00:01:26,210 --> 00:01:29,970
We'll keep coming back to this, that JavaScript strings are immutable,

24
00:01:29,970 --> 00:01:32,200
that means I can't change the string.

25
00:01:32,200 --> 00:01:36,557
For instance, if I have a variable called animal and I set it to cat,

26
00:01:36,557 --> 00:01:41,068
and I try to set animal[0] to r, to change it to rat, and I print it,

27
00:01:41,068 --> 00:01:45,988
it'll still be cat, because I can't change the characters in the string.

28
00:01:45,988 --> 00:01:50,179
We can, however, use functions to return a new string that is

29
00:01:50,179 --> 00:01:53,170
a modified version of the original string.

30
00:01:53,170 --> 00:01:58,686
For instance, I have a string called friend, which is set to turtle,

31
00:01:58,686 --> 00:02:04,389
and I can use the toUpperCase function to return a new string shown here,

32
00:02:04,389 --> 00:02:07,500
which is those letters but uppercase.

33
00:02:08,530 --> 00:02:12,680
However, if I print the value of friend, it's still lowercase turtle.

34
00:02:12,680 --> 00:02:16,290
I can't change the characters in the variable but

35
00:02:16,290 --> 00:02:21,040
I can create a new string that has those changed characters.

36
00:02:21,040 --> 00:02:24,930
Another common operation is to remove white space from a string.

37
00:02:24,930 --> 00:02:28,920
Here I have a string called message, which is set to hello everyone, but

38
00:02:28,920 --> 00:02:34,540
you see that there is some space before the h and after the e.

39
00:02:34,540 --> 00:02:37,770
I can use the trim function on the message,

40
00:02:37,770 --> 00:02:41,740
that will remove the white space at the beginning and the end and

41
00:02:41,740 --> 00:02:46,800
return a new string which is the old string but without the white space.

42
00:02:46,800 --> 00:02:50,320
Now, I set message = message.trim,

43
00:02:50,320 --> 00:02:54,380
we've lost the original string but now a message holds the new one.

44
00:02:54,380 --> 00:02:58,170
I can even call the function on a string literal,

45
00:02:58,170 --> 00:03:00,810
it doesn't necessarily have to be a string variable.

46
00:03:00,810 --> 00:03:03,790
Here I'm calling it on the string literal, cat.

47
00:03:03,790 --> 00:03:09,820
I'm concatenating it with mouse and I'm setting my animal to the concatenation

48
00:03:09,820 --> 00:03:13,510
so that when I print it, my animal is catmouse.

49
00:03:13,510 --> 00:03:17,953
Now, a common operation that we may want to perform is knowing whether a string

50
00:03:17,953 --> 00:03:23,350
contains some other string that is knowing that one string is a substring of another.

51
00:03:23,350 --> 00:03:24,880
We'll start with this string,

52
00:03:25,920 --> 00:03:31,500
which reads programming in JavaScript is fun, and we want to know does that string,

53
00:03:31,500 --> 00:03:36,010
does that variable, start with this string here, programming.

54
00:03:36,010 --> 00:03:38,760
The startsWith function will return true,

55
00:03:38,760 --> 00:03:41,990
because this string does start with those characters.

56
00:03:41,990 --> 00:03:46,690
It's worth pointing out that startsWith is case sensitive, so

57
00:03:46,690 --> 00:03:50,780
when I ask does it start with programming in all capital letters,

58
00:03:50,780 --> 00:03:55,050
it will return false, because it does not start with those letters.

59
00:03:55,050 --> 00:03:57,960
In addition to startsWith, there's endsWith.

60
00:03:57,960 --> 00:04:03,570
I might want to know, does this string ends with this string?

61
00:04:03,570 --> 00:04:07,560
It's okay that it includes a white space and this will return true because,

62
00:04:07,560 --> 00:04:11,050
as we see here, it does end with that string.

63
00:04:11,050 --> 00:04:15,690
Last, I might wanna know does this string include, for instance,

64
00:04:15,690 --> 00:04:19,170
JavaScript anywhere, not necessarily at the beginning or the end.

65
00:04:19,170 --> 00:04:23,790
And this will, again, return true because it does contain or

66
00:04:23,790 --> 00:04:26,295
does include JavaScript.

67
00:04:26,295 --> 00:04:32,060
Sometimes we might want to know where in the string we can find that substring,

68
00:04:32,060 --> 00:04:36,200
startsWith, endsWith, and includes, all return booleans.

69
00:04:36,200 --> 00:04:36,750
In this case,

70
00:04:36,750 --> 00:04:41,050
we have a string called title which will be set to the title of my book.

71
00:04:41,050 --> 00:04:47,960
And I can use the search function to ask does that string contain this string here.

72
00:04:47,960 --> 00:04:52,160
Rather than returning true or false, this will return the index

73
00:04:52,160 --> 00:04:57,470
of the original string where it finds this string for which it's searching.

74
00:04:57,470 --> 00:05:04,470
It'll return 4 because it does contain the string title and that starts at the 0,

75
00:05:04,470 --> 00:05:09,430
1, 2, 3, 4th index of the string, so it'll return 4.

76
00:05:09,430 --> 00:05:13,320
However, if it does not contain that string, for

77
00:05:13,320 --> 00:05:17,930
instance banana, then it will return -1 to indicate

78
00:05:17,930 --> 00:05:21,890
that the string does not contain this other string that we're looking for.

79
00:05:21,890 --> 00:05:26,010
So we've seen how to determine whether one string contains another string.

80
00:05:26,010 --> 00:05:29,380
But what if we want to know does a string adhere to some pattern, for

81
00:05:29,380 --> 00:05:33,040
instance, is it an email address, is it a string and then a character and

82
00:05:33,040 --> 00:05:36,350
then a string and then a character, and so on, is it phone number,

83
00:05:36,350 --> 00:05:41,840
does it adhere to some pattern of numbers and letters and special characters.

84
00:05:41,840 --> 00:05:45,960
In order to do that, we need to use what are known as regular expressions.

85
00:05:45,960 --> 00:05:49,520
A regular expression is just a pattern of characters.

86
00:05:49,520 --> 00:05:52,520
But it's not a string but rather a specification

87
00:05:52,520 --> 00:05:56,590
of the characters that we want to see whether another string matches.

88
00:05:56,590 --> 00:06:01,467
We say that a string matches a regular expression if it adheres to that pattern.

89
00:06:01,467 --> 00:06:06,423
For example, we might want to know does this string consist of exactly

90
00:06:06,423 --> 00:06:09,870
three digits, digits being zero through nine.

91
00:06:09,870 --> 00:06:13,690
123 matches but abc does not match,

92
00:06:13,690 --> 00:06:18,450
12 does not match because we want to know does it contain exactly three digits.

93
00:06:18,450 --> 00:06:21,390
12345 does not match for the same reason.

94
00:06:21,390 --> 00:06:26,790
Let's see how we can use regular expressions within JavaScript strings.

95
00:06:26,790 --> 00:06:30,410
We can pass a regular expression to a string's search function

96
00:06:30,410 --> 00:06:32,570
to see if it matches the pattern.

97
00:06:32,570 --> 00:06:35,570
And this will be considered a match if any part of the string

98
00:06:35,570 --> 00:06:37,800
matches that regular expression.

99
00:06:37,800 --> 00:06:42,272
Here, we have a string status that reads, I am working VERY hard, I can use

100
00:06:42,272 --> 00:06:49,320
the status.search function to see if it contains the regular expression, VERY.

101
00:06:49,320 --> 00:06:52,250
The regular expression is noted here.

102
00:06:52,250 --> 00:06:54,050
Note that it is not a string.

103
00:06:54,050 --> 00:06:59,290
In the previous few slides, we saw the search function with a string.

104
00:06:59,290 --> 00:07:05,910
Here, VERY is a regular expression denoted by the slash here and here.

105
00:07:05,910 --> 00:07:10,300
Because this string status does contain VERY

106
00:07:10,300 --> 00:07:13,950
here at index 13, this will return 13.

107
00:07:13,950 --> 00:07:19,040
However, when I pass the regular expression, very with lowercase,

108
00:07:20,050 --> 00:07:25,025
search will return -1, indicating that this is not found because it is case

109
00:07:25,025 --> 00:07:30,160
sensitive here, it doesn't match VERY, capital V, etc.

110
00:07:30,160 --> 00:07:32,560
Unlike strings, if I had passed a string,

111
00:07:32,560 --> 00:07:37,580
it would return -1 because it doesn't match, it's case sensitive.

112
00:07:37,580 --> 00:07:43,980
However, I can, with a regular expression, tell it to ignore case by putting the i

113
00:07:43,980 --> 00:07:50,190
at the end indicating that it should be case insensitive, it should ignore case.

114
00:07:50,190 --> 00:07:52,160
Now it will return 13,

115
00:07:52,160 --> 00:07:58,130
because ignoring case, the original string does contain that string very.

116
00:07:58,130 --> 00:08:04,180
Now, a regular expression or regex is itself an object and it has functions of

117
00:08:04,180 --> 00:08:09,140
its own including the function test which we'll see for the rest of this lesson.

118
00:08:09,140 --> 00:08:14,470
In this case, I have a regular expression, not a string but a regular expression,

119
00:08:14,470 --> 00:08:18,540
script indicated with the two slashes here.

120
00:08:19,630 --> 00:08:24,500
And I'm going to invoke its test function to see if that regular expression

121
00:08:24,500 --> 00:08:28,660
is included in the string that is the argument of this function.

122
00:08:28,660 --> 00:08:35,450
That is, I'm going to look to see if this is included here and, of course, it is.

123
00:08:35,450 --> 00:08:37,270
So it will return true.

124
00:08:37,270 --> 00:08:40,910
That's great, that seems handy but we've seen all that already with strings.

125
00:08:40,910 --> 00:08:43,870
So what can we do different with regular expressions

126
00:08:43,870 --> 00:08:46,050
that we couldn't do with strings already?

127
00:08:46,050 --> 00:08:51,440
In particular, regular expressions allow us to specify multiple valid characters

128
00:08:51,440 --> 00:08:53,590
that we can consider for matching.

129
00:08:53,590 --> 00:08:59,420
For instance, maybe I want to look for any of some range of specific characters.

130
00:08:59,420 --> 00:09:04,540
Here I have a string called numbers, consisting of these characters here.

131
00:09:04,540 --> 00:09:10,210
And now I can use this regular expression to see if it contains a 0, a 1, or a 2.

132
00:09:10,210 --> 00:09:15,220
That is, I have my regular expression notation with the slashes and

133
00:09:15,220 --> 00:09:19,380
then within the regular expression notation, I have the brackets.

134
00:09:19,380 --> 00:09:23,870
The brackets indicate, or they say, look for any character in this range,

135
00:09:24,960 --> 00:09:28,040
or in this particular case, in this set of characters.

136
00:09:28,040 --> 00:09:32,630
That is, we'll look to see if the string contains a 0, a 1,

137
00:09:32,630 --> 00:09:36,600
or a 2, any character in this set or in this range.

138
00:09:37,600 --> 00:09:41,338
Of course, numbers, the string numbers does contain a 0, a 1, or

139
00:09:41,338 --> 00:09:43,600
a 2 as we see right there.

140
00:09:43,600 --> 00:09:50,008
And so this will return 4, which is the (0-based) index of the 2 right here.

141
00:09:50,008 --> 00:09:54,830
Alternatively, I could specify my regular expression using

142
00:09:54,830 --> 00:10:00,770
the slash notation and then the range using the bracket notation.

143
00:10:00,770 --> 00:10:03,050
I can call the test function on that regular expression.

144
00:10:03,050 --> 00:10:08,176
I can pass numbers, the string numbers, to the regular expression and

145
00:10:08,176 --> 00:10:13,573
this will return true, because, remember, test returns true or false.

146
00:10:13,573 --> 00:10:17,652
So that led us to see if the string contained a 0, a 1, or 2.

147
00:10:17,652 --> 00:10:21,927
But what if I want to know if it contains any digit or, for instance,

148
00:10:21,927 --> 00:10:23,440
any lowercase letter?

149
00:10:23,440 --> 00:10:27,630
In this example, I have a string called password and

150
00:10:27,630 --> 00:10:31,110
now rather than specifying every character for which I'm looking,

151
00:10:31,110 --> 00:10:35,870
I can just specify the range using this notation, here I'm saying,

152
00:10:35,870 --> 00:10:40,535
I'm looking for a match where there's any character in this range,

153
00:10:40,535 --> 00:10:43,940
a-z, those are of course the lowercase letters.

154
00:10:43,940 --> 00:10:48,450
The search function will return the index of the first match.

155
00:10:48,450 --> 00:10:53,750
Here the first match in password is the lowercase p at index 0.

156
00:10:53,750 --> 00:10:59,020
So calling search will return 0, because that's the first place we find a match

157
00:10:59,020 --> 00:11:00,600
that is that contains a lowercase letter.

158
00:11:00,600 --> 00:11:04,750
With these ranges, I can also use some special characters.

159
00:11:04,750 --> 00:11:10,680
For instance, the \d indicates any digit being 0 through 9.

160
00:11:10,680 --> 00:11:16,600
Here's we're searching for any digit and it'll return 8, which is the index

161
00:11:16,600 --> 00:11:21,440
of this character here, because that's a match for \d.

162
00:11:21,440 --> 00:11:25,170
Now, we'll start to see how we can combine these different ranges

163
00:11:25,170 --> 00:11:29,880
to do more powerful searching or pattern matching with regular expressions.

164
00:11:29,880 --> 00:11:34,060
Here I have a string called code, it's a bunch of letters and numbers and

165
00:11:34,060 --> 00:11:38,420
I want to use this regular expression to find out does it contain

166
00:11:39,440 --> 00:11:43,830
a digit followed by a lowercase letter followed by a digit.

167
00:11:43,830 --> 00:11:49,430
So I'll use my regular expression notation using the slashes and I'll specify

168
00:11:49,430 --> 00:11:53,600
that the first character in the sequence, or the regular expression, is a digit.

169
00:11:53,600 --> 00:11:56,520
I could have used /d as well.

170
00:11:56,520 --> 00:12:00,170
The next one has to be a lowercase letter followed by a digit.

171
00:12:00,170 --> 00:12:04,130
In this case, the function will return 5.

172
00:12:04,130 --> 00:12:04,780
Why?

173
00:12:04,780 --> 00:12:09,570
Because, at this point, we see a match here, we see a digit followed by

174
00:12:09,570 --> 00:12:14,510
a lowercase letter, which is the d, followed by a digit, which is the 4.

175
00:12:14,510 --> 00:12:18,230
There are other matches as well, for instance, 4e5 but

176
00:12:18,230 --> 00:12:24,580
this will return the first match which starts here at index number 5.

177
00:12:24,580 --> 00:12:28,350
We can also tell it to look for characters not in a particular range.

178
00:12:28,350 --> 00:12:31,290
We want to know are there characters that are not, for

179
00:12:31,290 --> 00:12:34,087
instance, in a digit or a lowercase letter.

180
00:12:35,730 --> 00:12:40,920
So here we have some characters and we'll use the search function, and now we'll use

181
00:12:40,920 --> 00:12:47,070
the caret notation to indicate that we are not looking for these characters.

182
00:12:47,070 --> 00:12:51,890
So by specifying this range, we're saying we're looking for a character that is

183
00:12:51,890 --> 00:12:56,630
not in the range 0 through 9 and lowercase a through lowercase z.

184
00:12:56,630 --> 00:13:00,950
And we'll get 6 because capital K is not in that range and

185
00:13:00,950 --> 00:13:04,340
that's the index 6 in that string.

186
00:13:04,340 --> 00:13:07,680
Regular expressions allow us to do more powerful pattern matching or

187
00:13:07,680 --> 00:13:11,330
searching using what are known as quantifiers.

188
00:13:11,330 --> 00:13:15,300
For instance, quantifiers can help us know whether the string contains an optional

189
00:13:15,300 --> 00:13:18,300
single occurrence of some character.

190
00:13:18,300 --> 00:13:20,220
Let's look at this line here.

191
00:13:20,220 --> 00:13:23,720
Here we have the regular expression, we're using its test function and

192
00:13:23,720 --> 00:13:27,740
then this is the string we're seeing if it matches that pattern.

193
00:13:27,740 --> 00:13:33,880
We want to know does this string contain a character followed by an optional digit.

194
00:13:33,880 --> 00:13:36,870
The question mark means 0 or 1.

195
00:13:36,870 --> 00:13:42,340
The question mark means it's okay if it contains this character, in this case,

196
00:13:42,340 --> 00:13:46,720
a digit, and it's okay if it doesn't but it can't contain more than one.

197
00:13:46,720 --> 00:13:52,110
In this case, the 1 matches this, so that's a match.

198
00:13:52,110 --> 00:13:55,450
It's followed by a lowercase letter, so

199
00:13:55,450 --> 00:13:58,480
this will return true because it matches this pattern.

200
00:13:58,480 --> 00:14:01,710
In this next example, we're going to see

201
00:14:01,710 --> 00:14:05,935
does it have a lowercase letter followed by an optional number.

202
00:14:07,330 --> 00:14:12,569
Again, or a digit, the digit is optional, so it's okay if there's no match here.

203
00:14:13,940 --> 00:14:18,390
We continue, we find a lowercase letter which is the b and

204
00:14:18,390 --> 00:14:20,430
this will return true as well.

205
00:14:20,430 --> 00:14:24,970
In this final case, though, we'll look for a match of a lowercase letter.

206
00:14:24,970 --> 00:14:29,530
We do see one digit but, remember, the digit in this case,

207
00:14:29,530 --> 00:14:34,070
because of the question mark quantifier, can only be a single occurence.

208
00:14:34,070 --> 00:14:38,800
The thing that follows it would have to be now a lowercase letter but it's not, so

209
00:14:38,800 --> 00:14:40,690
this will return false.

210
00:14:40,690 --> 00:14:45,350
The other quantifier is the asterisk, which means 0 or more.

211
00:14:45,350 --> 00:14:47,510
The question mark meaning 0 or 1,

212
00:14:47,510 --> 00:14:51,180
the asterisk means just multiple occurences but optional.

213
00:14:52,280 --> 00:15:00,140
In this case, we have a lowercase letter followed by 0 or more digits.

214
00:15:00,140 --> 00:15:03,286
So it will match the 1, the 2, the 3, and

215
00:15:03,286 --> 00:15:09,850
then next it will match another lowercase letter, and so this will return true.

216
00:15:09,850 --> 00:15:13,780
There are also special characters indicating the start of the string and

217
00:15:13,780 --> 00:15:14,610
the end of the string.

218
00:15:15,970 --> 00:15:18,800
Similar to what we saw with startsWith and endsWith but

219
00:15:18,800 --> 00:15:20,890
now using regular expressions.

220
00:15:20,890 --> 00:15:23,690
In this case, the caret means startsWith.

221
00:15:23,690 --> 00:15:27,890
Remember, before we saw the caret inside the square brackets,

222
00:15:27,890 --> 00:15:31,200
meaning not, here it means starts with.

223
00:15:31,200 --> 00:15:34,140
So this wants to know does this string start with

224
00:15:34,140 --> 00:15:39,830
a lowercase letter followed by a digit, it does, so it will return it true.

225
00:15:39,830 --> 00:15:43,800
Does this one start with a lowercase letter followed by a digit?

226
00:15:43,800 --> 00:15:46,234
No, this will return false.

227
00:15:46,234 --> 00:15:49,336
You'll note that this particular string does

228
00:15:49,336 --> 00:15:54,025
have a lowercase letter followed by a digit, for instance, b1, but

229
00:15:54,025 --> 00:15:58,176
it doesn't start with that and that's why it returns false.

230
00:15:58,176 --> 00:16:01,560
Here we can use the $ to indicate endsWith,

231
00:16:01,560 --> 00:16:06,681
here we want know does this end with two lowercase letters, I guess

232
00:16:06,681 --> 00:16:12,639
the easiest way to think about it is working at the end and working backwards.

233
00:16:12,639 --> 00:16:14,382
Does it end with a lowercase letter?

234
00:16:14,382 --> 00:16:17,921
Yes, is that preceded by a lowercase letter?

235
00:16:17,921 --> 00:16:19,710
Yes, so this will return true.

236
00:16:20,850 --> 00:16:24,640
In this case, though, does it end with a lowercase letter?

237
00:16:24,640 --> 00:16:27,250
No, so it will return false.

238
00:16:27,250 --> 00:16:31,140
Again, you'll note that this does, in a couple of places,

239
00:16:31,140 --> 00:16:36,680
match two lowercase letters but it doesn't end with the lowercase letters.

240
00:16:36,680 --> 00:16:40,030
Then this lets us detect exact matches.

241
00:16:40,030 --> 00:16:44,250
I want to know does this string contain only,, for

242
00:16:44,250 --> 00:16:47,840
instance, a letter followed by a number followed by a letter.

243
00:16:47,840 --> 00:16:52,360
And we can combine the startsWith and endsWith and quantifiers.

244
00:16:52,360 --> 00:16:59,380
So here we wanna know does this string, a1b, match this regular expression here?

245
00:16:59,380 --> 00:17:03,660
Well, it's asking does it start with a lowercase letter, it does.

246
00:17:03,660 --> 00:17:08,430
Followed by a digit, followed by a lowercase letter, and

247
00:17:08,430 --> 00:17:10,660
ending with the lowercase letter.

248
00:17:10,660 --> 00:17:13,630
Yes, so it's true, it does match that pattern.

249
00:17:13,630 --> 00:17:18,150
A lowercase letter, a digit, a lowercase letter, and nothing else.

250
00:17:18,150 --> 00:17:21,430
In this example, we see that it starts with the lowercase letter

251
00:17:22,730 --> 00:17:27,300
followed by the digit followed by a lowercase letter.

252
00:17:27,300 --> 00:17:31,740
But now, it's expecting the end of the string, we're not at the end,

253
00:17:31,740 --> 00:17:34,770
we see another character, so this will return false.

254
00:17:34,770 --> 00:17:40,160
And finally, we'll start with a lowercase letter and what this means,

255
00:17:40,160 --> 00:17:44,670
remember, our quantifier using the asterisk optional,

256
00:17:44,670 --> 00:17:48,710
any number of digits or lowercase letters that will match the 1,

257
00:17:48,710 --> 00:17:51,590
that will match the b, that'll match the 2.

258
00:17:51,590 --> 00:17:57,030
And here, we see it ends with the lowercase letter and that's true.

259
00:17:57,030 --> 00:17:59,862
In summary, we've seen how to use JavaScript's string

260
00:17:59,862 --> 00:18:03,402
functions to determine whether one string contains another string and

261
00:18:03,402 --> 00:18:06,885
how to use regular expressions to do more powerful pattern matching.

