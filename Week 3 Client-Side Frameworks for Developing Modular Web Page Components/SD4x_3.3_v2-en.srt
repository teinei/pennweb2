0
00:00:05,455 --> 00:00:07,453
Last time we saw how to create React components,

1
00:00:07,453 --> 00:00:09,790
including their properties and state.

2
00:00:09,790 --> 00:00:14,430
But the whole point of React is that the component can react to user events.

3
00:00:14,430 --> 00:00:18,420
In this lesson, we'll see three examples in which the React component's appearance

4
00:00:18,420 --> 00:00:21,600
changes based on what's happening in the application.

5
00:00:21,600 --> 00:00:25,830
The state of the component typically changes in response to some user action or

6
00:00:25,830 --> 00:00:32,720
event, and we can bind an event to a call back function within the React component.

7
00:00:32,720 --> 00:00:37,176
That component can then change its state using the setState function, and

8
00:00:37,176 --> 00:00:41,940
when setState is called, that will automatically call render, which will

9
00:00:41,940 --> 00:00:47,120
redraw the component, and any other affected component in the virtual DOM.

10
00:00:47,120 --> 00:00:51,058
We'll start with the classic example of the button that when you click it,

11
00:00:51,058 --> 00:00:52,629
it increments some counter.

12
00:00:52,629 --> 00:00:56,391
We've seen this example a few times already, but now we'll see it in React and

13
00:00:56,391 --> 00:00:59,868
then talk about why we'd want to do something like this using a framework

14
00:00:59,868 --> 00:01:00,860
like React.

15
00:01:00,860 --> 00:01:04,820
If you remember, as before, I have this button that says, Click Me, and

16
00:01:04,820 --> 00:01:07,900
when I click it, the counter increments, and so on.

17
00:01:07,900 --> 00:01:10,930
Let's see how we would do this using a React component.

18
00:01:12,270 --> 00:01:16,810
Everything that we saw, the word count, the number of times it's been clicked, and

19
00:01:16,810 --> 00:01:20,200
the button are all part of this single component,

20
00:01:20,200 --> 00:01:24,220
which I'll call counter, and I'll create the counter component

21
00:01:24,220 --> 00:01:28,640
using the ES6 notation of extending React.Component.

22
00:01:28,640 --> 00:01:32,520
The constructor is the function that's called when this component is created.

23
00:01:33,570 --> 00:01:35,940
It takes the props that are passed to it and

24
00:01:35,940 --> 00:01:38,930
it'll also pass it to the superclass constructor.

25
00:01:38,930 --> 00:01:41,330
Now I'm initializing the state.

26
00:01:41,330 --> 00:01:45,470
Remember the state can be initialized in the constructor, and

27
00:01:45,470 --> 00:01:47,980
I'm setting the count to zero.

28
00:01:47,980 --> 00:01:51,070
Now I have the callback function incrementCount.

29
00:01:51,070 --> 00:01:54,829
In incrementCount, I'm going to use this.setState.

30
00:01:54,829 --> 00:02:00,290
This.setState takes an object, which is the new state of this component.

31
00:02:01,570 --> 00:02:05,690
Here we're updating the count property of the state

32
00:02:05,690 --> 00:02:09,160
by reading the old count and incrementing it by one.

33
00:02:10,300 --> 00:02:13,340
It's so important to note that you should never

34
00:02:13,340 --> 00:02:18,260
use this.state anywhere else except for the constructor.

35
00:02:19,270 --> 00:02:23,070
Any other time you want to modify the state, you should always, always,

36
00:02:23,070 --> 00:02:28,800
always use this.setState and then pass it the new state.

37
00:02:28,800 --> 00:02:33,340
There are two reasons for doing this one is that this.setState

38
00:02:33,340 --> 00:02:37,890
will do an incremental adjustment to the state, as we'll see later

39
00:02:37,890 --> 00:02:41,860
if I update one part of the state but not other, setState will handle that.

40
00:02:43,450 --> 00:02:49,220
Also, when I call this.setState, it will automatically call render, because when

41
00:02:49,220 --> 00:02:54,590
I set the state or change the state of this component, I may want to redraw it.

42
00:02:54,590 --> 00:02:59,020
Our render function is going to return the jsx,

43
00:02:59,020 --> 00:03:03,210
which is the HTML of how we want this to appear in our page.

44
00:03:03,210 --> 00:03:07,660
Whatever is returned by the render function always has to have some start and

45
00:03:07,660 --> 00:03:08,580
end tag.

46
00:03:08,580 --> 00:03:10,130
We can't just have text or

47
00:03:10,130 --> 00:03:15,750
HTML, there needs to be surrounding HTML element, here we're using a div.

48
00:03:15,750 --> 00:03:18,235
Then we'll have the text count, and

49
00:03:18,235 --> 00:03:22,898
then we want to show the number of times this button has been clicked.

50
00:03:22,898 --> 00:03:28,950
So we'll use the count property from the state, using this.state.count.

51
00:03:28,950 --> 00:03:30,440
Now we have the button.

52
00:03:30,440 --> 00:03:36,020
We need to bind, or associate, or link some function with clicking the button.

53
00:03:36,020 --> 00:03:40,900
So we set the buttons onClick attributes like this.

54
00:03:40,900 --> 00:03:46,340
So this notation is perhaps a little bit clunky, but all it's doing is connecting

55
00:03:46,340 --> 00:03:51,890
the incrementCount function from this component to this button.

56
00:03:51,890 --> 00:03:57,180
So we'll just use this syntax to indicate that the incrementCount function

57
00:03:57,180 --> 00:04:00,750
is bound to this action, which is onClick.

58
00:04:00,750 --> 00:04:04,460
Last we have the text that appears in the button, which is increment.

59
00:04:04,460 --> 00:04:06,350
So we've seen that example a few times now.

60
00:04:06,350 --> 00:04:10,927
We've seen how to do it using the dom, we've how to do it using jquery, and

61
00:04:10,927 --> 00:04:13,194
we've seen how to do it using React.

62
00:04:13,194 --> 00:04:16,455
So you might think, why would I use React for something like that,

63
00:04:16,455 --> 00:04:19,850
it seems like a lot of work to create the component, to use JSX, etc.

64
00:04:19,850 --> 00:04:25,070
But the main point of React is I can use these components in different webpages,

65
00:04:25,070 --> 00:04:29,510
and that each component maintains its own state as we'll see in this example.

66
00:04:29,510 --> 00:04:31,700
Here we have two like button.

67
00:04:31,700 --> 00:04:36,140
These are both the same component, and they both maintain their own state.

68
00:04:36,140 --> 00:04:40,780
When I click the first one at the top, it changes that component so

69
00:04:40,780 --> 00:04:44,610
that the text which read Java is now bold and red,

70
00:04:44,610 --> 00:04:49,540
and you can also see that the word like switched to unlike.

71
00:04:49,540 --> 00:04:52,760
If I move the mouse down to where it says JavaScript, and

72
00:04:52,760 --> 00:04:57,500
I click on that one, now JavaScript will change to red and bold.

73
00:04:57,500 --> 00:05:00,920
That, of course, does not affect the other component, and then I can move back, and

74
00:05:00,920 --> 00:05:07,360
I can, unlike Java, and each has its own state and renders itself accordingly.

75
00:05:07,360 --> 00:05:11,180
Let's start with how did I drop these components into the HTML, and

76
00:05:11,180 --> 00:05:14,072
then we'll see the definition of the components.

77
00:05:14,072 --> 00:05:16,570
I have ReactDOM.render.

78
00:05:16,570 --> 00:05:22,120
Remember, whatever we render needs to be surrounded by some HTML element,

79
00:05:22,120 --> 00:05:27,210
here we'll use a div, and now I have two instances of the LikeButton.

80
00:05:27,210 --> 00:05:31,070
The first LikeButton, I pass it the property, which is the name Java,

81
00:05:31,070 --> 00:05:34,990
and the second one I passed the property, which is the name JavaScript.

82
00:05:36,000 --> 00:05:38,470
Now here's the definition of our like button component.

83
00:05:39,940 --> 00:05:42,659
Like button is a class that extends React.Component.

84
00:05:43,960 --> 00:05:47,910
In its constructor we pass the properties to the super class constructor.

85
00:05:47,910 --> 00:05:49,680
Now we'll initialize the state so

86
00:05:49,680 --> 00:05:53,270
that we'll have a variable called liked, which is set to false.

87
00:05:53,270 --> 00:05:56,010
Then we have the callback function called toggle.

88
00:05:56,010 --> 00:05:58,460
The toggle function will toggle, or alternate, or

89
00:05:58,460 --> 00:06:01,290
switch the value of the liked variable.

90
00:06:01,290 --> 00:06:05,010
When this callback function is invoked we'll use this.setState,

91
00:06:05,010 --> 00:06:08,410
and we'll set the value of the liked variable

92
00:06:08,410 --> 00:06:11,370
to the opposite of whatever it had previously been.

93
00:06:11,370 --> 00:06:16,550
If this.state.liked had been false, now liked will be true and vice versa.

94
00:06:16,550 --> 00:06:19,630
Again, worth pointing out, that after the constructor,

95
00:06:19,630 --> 00:06:24,610
we never set the state directly, but rather we use this.setState,

96
00:06:24,610 --> 00:06:29,030
and one of the reasons for doing that, is because it will automatically call render,

97
00:06:29,030 --> 00:06:34,750
which will allow us to re-render or redraw this component within the HTML.

98
00:06:34,750 --> 00:06:37,340
Now, render is a function just like any other function and

99
00:06:37,340 --> 00:06:38,660
it can have local variables.

100
00:06:39,680 --> 00:06:44,100
So we'll have a local variable called name, which will be set to the name

101
00:06:44,100 --> 00:06:48,730
part of the props that was initialized when this component was created,

102
00:06:48,730 --> 00:06:51,820
and we'll also have a variable called text,

103
00:06:51,820 --> 00:06:55,930
which is the text to appear to the right of the thumbs-up sign.

104
00:06:57,100 --> 00:07:00,449
Here we're using the ternary operator that you've probably seen before.

105
00:07:01,480 --> 00:07:06,990
It'll read the value of liked, and if it's true, then it'll set the text to Unlike,

106
00:07:06,990 --> 00:07:10,820
because it's already liked, then we have the opportunity to unlike it.

107
00:07:10,820 --> 00:07:14,710
But if liked is false then it will set the text to Like.

108
00:07:14,710 --> 00:07:17,980
We can have a local variable called myColor,

109
00:07:17,980 --> 00:07:21,580
which will be red if this is liked and black if it's not, and

110
00:07:21,580 --> 00:07:25,610
weight, which will be bold if it's liked and normal if not.

111
00:07:25,610 --> 00:07:28,440
Now we have the return value of the render function,

112
00:07:28,440 --> 00:07:33,090
and we'll start out with this span, which will be the name

113
00:07:33,090 --> 00:07:37,210
that was passed to it when this object or component was created.

114
00:07:37,210 --> 00:07:42,060
We can specify the style or appearance of the text in this span using

115
00:07:42,060 --> 00:07:47,440
the style attribute, and passing it an object that contains the key-value pairs,

116
00:07:47,440 --> 00:07:50,140
or the properties, for how we want it to appear.

117
00:07:51,240 --> 00:07:52,380
Color is the attribute,

118
00:07:52,380 --> 00:07:58,130
and we'll set the value to myColor, which was set up here as either red or black.

119
00:07:58,130 --> 00:08:00,740
FontWeight is the other attribute.

120
00:08:00,740 --> 00:08:04,760
Here we have to use the camel caps style of writing fontWeight,

121
00:08:04,760 --> 00:08:08,180
with a capital W here, and we'll set it to weight,

122
00:08:09,190 --> 00:08:12,310
which was defined up here as either bold or normal.

123
00:08:12,310 --> 00:08:18,340
Next we have the name, which was set up here to this.props.name.

124
00:08:18,340 --> 00:08:23,210
Next to that will be another span where we'll set the callback function for

125
00:08:23,210 --> 00:08:27,310
the onClick event, and as we saw before we need to use this notation, or

126
00:08:27,310 --> 00:08:33,680
this syntax to bind the toggle function to this event.

127
00:08:33,680 --> 00:08:36,820
That would be the toggle function up here which will toggle, or

128
00:08:36,820 --> 00:08:38,960
switch the value of light.

129
00:08:38,960 --> 00:08:42,150
The text within that span includes this,

130
00:08:42,150 --> 00:08:46,420
which is the unicode value for the thumbs up icon, and

131
00:08:46,420 --> 00:08:52,240
then next to that will be the text which we setup here as unlike or like.

132
00:08:52,240 --> 00:08:56,350
In this last example, we'll see that we can have multiple callback functions for

133
00:08:56,350 --> 00:08:57,930
the same component.

134
00:08:57,930 --> 00:09:00,910
I have some text that reads look at me, and

135
00:09:00,910 --> 00:09:05,010
when I mouse over it, it'll turn bold, and when I mouse away from it,

136
00:09:05,010 --> 00:09:10,000
it'll go back to normal, but then when I move up, and click it, it will turn red.

137
00:09:10,000 --> 00:09:15,247
So this component will be called MyText, as always, we'll take the props and

138
00:09:15,247 --> 00:09:19,159
the constructor, and then we'll initialize the state.

139
00:09:19,159 --> 00:09:21,250
The state will have two values.

140
00:09:21,250 --> 00:09:24,880
The first is bold, which indicates whether this should be bold.

141
00:09:24,880 --> 00:09:29,340
We'll initialize that to false, and in the color, which we'll initialize to black.

142
00:09:29,340 --> 00:09:32,050
Below we have the three callback functions.

143
00:09:32,050 --> 00:09:35,040
The first one I've called handleMouseOver which will be called

144
00:09:35,040 --> 00:09:37,420
when we mouse over this component, and

145
00:09:37,420 --> 00:09:42,010
in handleMouseOver I'll set the state so that bold is now true.

146
00:09:43,160 --> 00:09:46,620
Now keep in mind, as I mention numerous times before,

147
00:09:46,620 --> 00:09:51,180
we should always use setState, and not directly change the state.

148
00:09:51,180 --> 00:09:54,270
One of the reasons is that when we set the state we want

149
00:09:54,270 --> 00:09:56,750
it to automatically call render, but

150
00:09:56,750 --> 00:10:01,610
the other part is that we don't want to have to reset the color to black.

151
00:10:01,610 --> 00:10:06,970
By just setting state for bold true, we will only change that part of the state,

152
00:10:06,970 --> 00:10:10,060
and we don't have to keep track of all of the other parts of the state.

153
00:10:10,060 --> 00:10:14,250
I'll have another callback function, for when we move away from the text.

154
00:10:14,250 --> 00:10:19,040
I'll call that handleMouseOut, and in this case, I'll set the bold part of the state

155
00:10:19,040 --> 00:10:23,790
to be false, and then last, I'll have a third callback function handleClick.

156
00:10:23,790 --> 00:10:27,100
This will be of course called when they click on the text, and

157
00:10:27,100 --> 00:10:31,250
rather than using the ternary operator, I'll just use a if else statement.

158
00:10:31,250 --> 00:10:36,120
Color is currently red, then I'll change the color to black in the state.

159
00:10:36,120 --> 00:10:38,550
Otherwise, if it's not red, then I'll change the color to red.

160
00:10:38,550 --> 00:10:41,470
Now we'll see the render function.

161
00:10:41,470 --> 00:10:44,520
The render function is going to create two local variables.

162
00:10:44,520 --> 00:10:48,850
One is called myColor, which comes from the state, and the other is called weight,

163
00:10:48,850 --> 00:10:52,840
which we'll use the bold part of the state, which is true or false.

164
00:10:52,840 --> 00:10:56,670
If it's true weight will be bold, if it's false weight will be normal.

165
00:10:56,670 --> 00:11:01,780
So then we have the return value for render which will be the span.

166
00:11:01,780 --> 00:11:05,110
As we saw on the previous example, we can set the style attribute for

167
00:11:05,110 --> 00:11:07,710
the span using some object.

168
00:11:07,710 --> 00:11:11,990
Here we're setting color to be myColor, and fontWeight to be weight.

169
00:11:11,990 --> 00:11:17,360
Then I'll set the onClick attribute of this span, so it will bind

170
00:11:17,360 --> 00:11:22,690
the handleClick function, as we saw in the previous slide, to this event, onClick.

171
00:11:22,690 --> 00:11:27,639
Likewise, we'll bind handleMouseOver to the onMouseOver event,

172
00:11:28,640 --> 00:11:32,580
and we'll bind handleMouseOut to the onMouseOut event.

173
00:11:32,580 --> 00:11:36,721
Last the text that will appear will come from the props and

174
00:11:36,721 --> 00:11:42,156
that's going to be set down at the bottom where I call ReactDOM.render and

175
00:11:42,156 --> 00:11:47,007
pass the text as a property to this component when it gets created.

176
00:11:47,007 --> 00:11:51,008
In this lesson we've seen how we can bind user events in HTML elements to

177
00:11:51,008 --> 00:11:55,542
the different callback functions in React components, and most importantly,

178
00:11:55,542 --> 00:11:59,879
we've seen that invoking the React component's setState function will not

179
00:11:59,879 --> 00:12:04,766
only change its state but automatically call render, thus redrawing the component.

