0
00:00:05,904 --> 00:00:09,957
Last week, we started looking at how we can create dynamic web content by

1
00:00:09,957 --> 00:00:12,800
embedding JavaScript in our HTML pages.

2
00:00:12,800 --> 00:00:16,840
And we saw jQuery, a library that made it easier to manipulate the DOM.

3
00:00:18,010 --> 00:00:22,900
This week, we'll look at two other libraries that allow us to create dynamic

4
00:00:22,900 --> 00:00:27,280
web content starting with a powerful and popular library known as React.

5
00:00:28,370 --> 00:00:32,810
React is a JavaScript library for building user interfaces.

6
00:00:32,810 --> 00:00:38,480
In the React model, a webpage is composed of components that have a life cycle and

7
00:00:38,480 --> 00:00:41,830
change state, which affects how they're rendered.

8
00:00:41,830 --> 00:00:45,110
React introduces this notion of the VirtualDOM,

9
00:00:45,110 --> 00:00:48,820
which allows us to add and remove elements.

10
00:00:48,820 --> 00:00:51,970
React is created and maintained by Facebook and

11
00:00:51,970 --> 00:00:54,680
is used by many well known companies.

12
00:00:54,680 --> 00:00:57,380
There are three important features to React.

13
00:00:57,380 --> 00:00:59,350
The first is modularity.

14
00:00:59,350 --> 00:01:03,920
Modularity allows us to organize the code into reusable components

15
00:01:03,920 --> 00:01:06,060
that can be connected together.

16
00:01:06,060 --> 00:01:08,490
This allows us to separate functionality

17
00:01:08,490 --> 00:01:12,300
into compartmentalize everything that we want to do.

18
00:01:12,300 --> 00:01:15,873
Second, React provides lifecycle maintenance.

19
00:01:15,873 --> 00:01:19,273
This involves modifying the component based on its state,

20
00:01:19,273 --> 00:01:24,850
adding event listeners and simplifying the way in which components are rendered.

21
00:01:24,850 --> 00:01:29,850
And last, React introduces a technology known as JSX,

22
00:01:29,850 --> 00:01:34,260
which allows us to embed HTML right into our JavaScript.

23
00:01:34,260 --> 00:01:36,400
Components are the core of React.

24
00:01:37,450 --> 00:01:40,980
Components make up the nodes inside the VirtualDOM and

25
00:01:40,980 --> 00:01:46,420
each component includes and maintains a state that changes with events.

26
00:01:46,420 --> 00:01:50,330
The components independently maintain their state and

27
00:01:50,330 --> 00:01:55,480
applications can be configured to respond to the different component events.

28
00:01:55,480 --> 00:01:59,640
So I mentioned this VirtualDOM a few times now, what do I mean by that?

29
00:01:59,640 --> 00:02:02,860
Well remember before that the DOM is the structural

30
00:02:02,860 --> 00:02:05,866
representation of all the HTML elements.

31
00:02:05,866 --> 00:02:11,600
In React, the VirtualDOM selectively renders and re-renders

32
00:02:11,600 --> 00:02:15,712
the different parts of the tree, or the different nodes, based on state changes.

33
00:02:15,712 --> 00:02:18,400
The VirtualDOM is more efficient because it does

34
00:02:18,400 --> 00:02:23,420
the least amount of DOM manipulation when it comes to updating components.

35
00:02:23,420 --> 00:02:27,250
Let's look at a visual example of how the normal DOM works.

36
00:02:27,250 --> 00:02:32,240
When any node in the DOM is updated, for instance some HTML element,

37
00:02:32,240 --> 00:02:36,960
the browser will update or re-render all the nodes in the DOM.

38
00:02:36,960 --> 00:02:40,094
So in this case I have a tree representing my DOM.

39
00:02:40,094 --> 00:02:43,307
Let's say that one of these nodes changes.

40
00:02:43,307 --> 00:02:49,070
In response to that, the entire DOM is re-rendered as a reflection of the change.

41
00:02:50,088 --> 00:02:55,310
In the VirtualDOM, React figures out which part of the DOM needs to change,

42
00:02:55,310 --> 00:02:58,370
and only changes the nodes that are affected.

43
00:02:58,370 --> 00:03:01,930
This involves two steps, diff and reconciliation.

44
00:03:03,120 --> 00:03:08,070
In the diff step React will to identify the node that has changed,

45
00:03:08,070 --> 00:03:12,940
and in reconciliation figure out which other nodes are affected by the change.

46
00:03:12,940 --> 00:03:17,430
Then it will re-render only the nodes that were affected by the change and

47
00:03:17,430 --> 00:03:20,220
not re-render any of the other nodes.

48
00:03:20,220 --> 00:03:24,010
As a developer there are three steps to using React.

49
00:03:24,010 --> 00:03:29,353
First, within the webpage's HTML you'll need to allocate some position

50
00:03:29,353 --> 00:03:34,802
where the React component will be dropped or rendered, for instance a div.

51
00:03:34,802 --> 00:03:38,329
The React component is then implemented in JavaScript.

52
00:03:38,329 --> 00:03:39,678
It has an initial state and

53
00:03:39,678 --> 00:03:44,370
it has events that could change the component's state during its lifecycle.

54
00:03:44,370 --> 00:03:49,000
And then it has a render function which will be used to draw that component or

55
00:03:49,000 --> 00:03:50,960
generate its HTML.

56
00:03:50,960 --> 00:03:55,577
And then last the component is dropped into the allocated

57
00:03:55,577 --> 00:03:58,377
position that came from step one.

58
00:03:58,377 --> 00:04:01,081
So let's look at the HTML first.

59
00:04:01,081 --> 00:04:02,041
In our HTML page,

60
00:04:02,041 --> 00:04:07,330
we'll create a div to represent a location where the React component will be placed.

61
00:04:07,330 --> 00:04:14,230
Here's HTML, and in the head of the HTML we need to include the React JavaScript.

62
00:04:14,230 --> 00:04:19,240
As with jQuery, React is not part of the web browser by default, so

63
00:04:19,240 --> 00:04:22,480
we'll need to include React in the page.

64
00:04:22,480 --> 00:04:26,230
Then in the body of my HTML page, we'll have some div,

65
00:04:26,230 --> 00:04:28,920
which is where we'll place the React component.

66
00:04:28,920 --> 00:04:32,160
Here I've labeled it with the ID container.

67
00:04:32,160 --> 00:04:34,170
You can of course choose anything you want, but

68
00:04:34,170 --> 00:04:36,720
I'll use container in all my examples.

69
00:04:36,720 --> 00:04:40,290
And then last, we have the JavaScript code.

70
00:04:40,290 --> 00:04:44,160
Note here, that for the JavaScript, we're specifying the type

71
00:04:44,160 --> 00:04:48,440
of the JavaScript which is text/jsx.

72
00:04:48,440 --> 00:04:50,620
Finally we'll write our JavaScript.

73
00:04:50,620 --> 00:04:52,240
What is JSX?

74
00:04:52,240 --> 00:04:57,630
JSX is JavaScript XML Syntax Transform, it's a way of putting

75
00:04:57,630 --> 00:05:03,540
HTML right into our JavaScript and then converting it to React code.

76
00:05:03,540 --> 00:05:08,806
As an example, here we see that we've specified JSX as the type of JavaScript.

77
00:05:08,806 --> 00:05:12,230
This function ReactDOM.render,

78
00:05:12,230 --> 00:05:17,260
is going to be used to put this HTML at this location.

79
00:05:18,530 --> 00:05:23,120
Notice that we're mixing the JavaScript, which is this and

80
00:05:23,120 --> 00:05:27,650
this, with HTML which is this.

81
00:05:27,650 --> 00:05:31,720
JSX allows us to do that in the appropriate places.

82
00:05:31,720 --> 00:05:36,070
Let's finish with a full hello world example using react.

83
00:05:36,070 --> 00:05:40,100
As before, we need to make sure that we include the react JavaScript files or

84
00:05:40,100 --> 00:05:43,310
libraries in the header of our HTML.

85
00:05:43,310 --> 00:05:46,570
Then we'll set up a div that we'll label with the id container.

86
00:05:46,570 --> 00:05:50,400
This is where we're going to insert or drop our React component.

87
00:05:50,400 --> 00:05:55,700
Within the JavaScript tags, we'll use this function, React-DOM.render

88
00:05:55,700 --> 00:06:00,830
that specifies the HTML that we should put at that location.

89
00:06:00,830 --> 00:06:05,397
Using jsx we can embed HTML right into our JavaScript.

90
00:06:05,397 --> 00:06:07,281
Here, we'll just say Hello, React!

91
00:06:07,281 --> 00:06:11,594
This specifies what we want to display and the second argument to the render

92
00:06:11,594 --> 00:06:15,660
function, this specifies where we're going to display it.

93
00:06:15,660 --> 00:06:18,650
We'll select that element by its ID,

94
00:06:18,650 --> 00:06:21,540
that will be the div that we've labelled container.

95
00:06:21,540 --> 00:06:24,863
In the next few lessons, we'll dive much deeper into using React.

96
00:06:24,863 --> 00:06:26,957
We'll see how we define components and

97
00:06:26,957 --> 00:06:31,540
how write the functions that modify those components based on user events.

98
00:06:31,540 --> 00:06:33,712
We'll see how components interact with each other.

99
00:06:33,712 --> 00:06:36,737
And then finally look at real world tools that are used for

100
00:06:36,737 --> 00:06:38,576
developing React applications.

